{"version":3,"sources":["Components/InputForm/InputForm.js","Models/MothlyData.js","Components/MothForm/MonthForm.js","Components/Calculator/Calculator.js","App.js","serviceWorker.js","index.js","Components/MothForm/MonthForm.module.css","Components/InputForm/InputForm.module.css"],"names":["InputForm","observer","className","Styles","formContainer","DatePicker","views","label","value","this","props","startData","onChange","onDateChange","TextField","e","onBalanceChange","target","openingBalance","type","variant","Component","MothlyData","month","deposit","withdraw","interest","Number","observable","MonthForm","monthlyData","field","map","data","i","onDepositChange","onWithdrawChange","onInterestChange","InputProps","endAdornment","InputAdornment","position","Button","color","onClick","asAboveHandler","startIcon","calculate","Calculator","componentDidMount","length","forEach","monthName","push","MonthlyData","startDate","getFullYear","getMonthlyDataForm","getResults","totalDeposit","totalWithdraw","Math","round","totalInterest","netBalance","isValidInput","isCalculated","date","Date","action","updateYear","balance","computed","year","slice","indexOf","rate","subTotal","App","utils","DateFnsUtils","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.fb642090.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { DatePicker } from \"@material-ui/pickers\"\r\nimport {observer} from \"mobx-react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Styles from './InputForm.module.css'\r\n\r\n@observer\r\nclass InputForm extends Component {\r\n    render() {\r\n        return (\r\n            <div className={Styles.formContainer}>\r\n                <DatePicker\r\n                    views={[\"year\"]}\r\n                    label=\"Select year\"\r\n                    value={this.props.startData}\r\n                    onChange={this.props.onDateChange}\r\n                />\r\n                <TextField onChange={(e) => this.props.onBalanceChange(e.target.value)} value={this.props.openingBalance} label={'opening balance'} type={'number'} variant=\"outlined\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputForm;","import {observable} from \"mobx\";\r\nexport default class MothlyData {\r\n    @observable\r\n    month;\r\n\r\n    @observable\r\n    deposit;\r\n\r\n    @observable\r\n    withdraw;\r\n\r\n    @observable\r\n    interest;\r\n\r\n\r\n    constructor(month, deposit, withdraw, interest) {\r\n        this.month = month;\r\n        this.deposit = Number(deposit);\r\n        this.withdraw = Number(withdraw);\r\n        this.interest = Number(interest);\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {observer} from \"mobx-react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Styles from './MonthForm.module.css'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport SubdirectoryArrowLeftIcon from '@material-ui/icons/SubdirectoryArrowLeft';\r\n\r\n@observer\r\nclass MonthForm extends Component {\r\n    render() {\r\n        const {monthlyData} = this.props;\r\n        return (\r\n            <>\r\n                <div className={Styles.formContainer}>\r\n                    <div className={Styles.field}>Month</div>\r\n                    <div className={Styles.field}>Deposit</div>\r\n                    <div className={Styles.field}>Withdraw</div>\r\n                    <div className={Styles.field}>Interest</div>\r\n                    <div className={Styles.field}> </div>\r\n                </div>\r\n                {monthlyData.map((data,i)=>\r\n                    <div className={Styles.formContainer}>\r\n                        <div className={Styles.field}>{data.month}</div>\r\n                        <TextField\r\n                            className={Styles.field}\r\n                            onChange={\r\n                                (e) =>\r\n                                    this.props.onDepositChange(i,e.target.value)\r\n                            }\r\n                            value={data.deposit}\r\n                            type={\"number\"} />\r\n                        <TextField\r\n                            className={Styles.field}\r\n                            onChange={\r\n                                (e) =>\r\n                                    this.props.onWithdrawChange(i,e.target.value)\r\n                            }\r\n                            value={data.withdraw}\r\n                            type={\"number\"} />\r\n                        <TextField\r\n                            className={Styles.field}\r\n                            onChange={\r\n                                (e) =>\r\n                                    this.props.onInterestChange(i,e.target.value)\r\n                            }\r\n                            InputProps={{\r\n                                endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n                            }}\r\n                            value={data.interest}\r\n                            type={\"number\"} />\r\n                        {\r\n                            i !== 0 ?\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    className={Styles.field}\r\n                                    onClick={()=>this.props.asAboveHandler(i)}\r\n                                    startIcon={<SubdirectoryArrowLeftIcon />}\r\n                                >\r\n                                    As above\r\n                                </Button> :\r\n                                <div className={Styles.field}> </div>\r\n                        }\r\n                    </div>\r\n                )}\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    className={Styles.field}\r\n                    onClick={this.props.calculate}\r\n                    startIcon={<PlaylistAddCheckIcon />}\r\n                >\r\n                    Calculate\r\n                </Button>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MonthForm;","import React, {Component} from 'react';\r\nimport {action, computed, observable} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport InputForm from \"../InputForm/InputForm\";\r\nimport MonthlyData from './../../Models/MothlyData'\r\nimport MonthForm from \"../MothForm/MonthForm\";\r\n\r\n@observer\r\nclass Calculator extends Component {\r\n    @observable\r\n    monthlyData = [];\r\n\r\n    @observable\r\n    startDate = new Date();\r\n\r\n    @observable\r\n    openingBalance = 0;\r\n\r\n    @observable\r\n    subTotal = [];\r\n\r\n    @observable\r\n    netBalance = 0;\r\n\r\n    @observable\r\n    totalWithdraw = 0;\r\n\r\n    @observable\r\n    totalDeposit = 0;\r\n\r\n    @observable\r\n    totalInterest = 0;\r\n\r\n    @action\r\n    onDateChange = (date) => {\r\n        this.startDate = date;\r\n        this.updateYear(date.getFullYear());\r\n    };\r\n\r\n    @action\r\n    onBalanceChange = (balance) => {\r\n        this.openingBalance = balance;\r\n    }\r\n\r\n    @computed\r\n    get isValidInput() {\r\n        return this.date !== null && this.openingBalance > 0;\r\n    }\r\n\r\n    @computed\r\n    get isCalculated() {\r\n        return this.netBalance > 0;\r\n    }\r\n\r\n    @action\r\n    updateYear = year => {\r\n        this.monthlyData.forEach(data => {\r\n            data.month = data.month.slice(0,data.month.indexOf(\"|\"))+\"|\"+year;\r\n        })\r\n    }\r\n\r\n    @action\r\n    onDepositChange = (i,value) => {\r\n        this.monthlyData[i].deposit = Number(value);\r\n    }\r\n\r\n    @action\r\n    onWithdrawChange = (i,value) => {\r\n        this.monthlyData[i].withdraw = Number(value);\r\n    }\r\n\r\n    @action\r\n    onInterestChange = (i,rate) => {\r\n        this.monthlyData[i].interest = Number(rate);\r\n    }\r\n\r\n    @action\r\n    asAboveHandler = i => {\r\n        this.monthlyData[i].deposit = this.monthlyData[i - 1].deposit;\r\n        this.monthlyData[i].withdraw = this.monthlyData[i - 1].withdraw;\r\n        this.monthlyData[i].interest = this.monthlyData[i - 1].interest;\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        if(this.monthlyData.length === 0) {\r\n            const monthsName = [\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\",\"January\", \"February\", \"March\" ];\r\n            let monthlyData = [];\r\n            monthsName.forEach((monthName)=> {\r\n                monthlyData.push(new MonthlyData(`${monthName}|${this.startDate.getFullYear()}`,0,0,0));\r\n            })\r\n            this.monthlyData= monthlyData;\r\n        }\r\n    }\r\n\r\n\r\n    getMonthlyDataForm = () => {\r\n        return <MonthForm\r\n            monthlyData={this.monthlyData}\r\n            onDepositChange={this.onDepositChange}\r\n            onWithdrawChange={this.onWithdrawChange}\r\n            onInterestChange={this.onInterestChange}\r\n            asAboveHandler={this.asAboveHandler}\r\n            calculate={this.calculate}\r\n        />;\r\n    }\r\n\r\n    @action\r\n    calculate = () => {\r\n        this.totalDeposit = 0;\r\n        this.subTotal = [];\r\n        this.totalInterest = 0;\r\n        this.totalWithdraw = 0;\r\n\r\n        this.monthlyData.forEach((data,i)=>{\r\n             if(i===0) {\r\n                 this.subTotal.push(Number(this.openingBalance) + Number(data.deposit) - Number(data.withdraw))\r\n             } else  {\r\n                 this.subTotal.push(Number(this.subTotal[i-1]) + Number(data.deposit) - Number(data.withdraw));\r\n             }\r\n\r\n            this.totalDeposit += data.deposit;\r\n            this.totalWithdraw += data.withdraw;\r\n            this.totalInterest += (this.subTotal[i] * Number(data.interest)) / 1200;\r\n        })\r\n\r\n        this.netBalance = Number(this.totalDeposit) + Number(this.openingBalance) + Math.round(Number(this.totalInterest)) - Number(this.totalWithdraw);\r\n    }\r\n\r\n    getResults = () => {\r\n\r\n        return <div>\r\n            <div>Total Deposit: {this.totalDeposit}</div>\r\n            <div>Total Withdraw: {this.totalWithdraw}</div>\r\n            <div>Total Interest: {Math.round(this.totalInterest)}</div>\r\n            <div>Total Net Balance: {this.netBalance}</div>\r\n        </div>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <InputForm\r\n                    startData={this.startDate}\r\n                    onDateChange={this.onDateChange}\r\n                    openingBalance={this.openingBalance}\r\n                    onBalanceChange={this.onBalanceChange}\r\n                />\r\n                <div>\r\n                    {this.isValidInput && this.getMonthlyDataForm()}\r\n                </div>\r\n                <div>\r\n                    {this.isCalculated && this.getResults()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport Calculator from \"./Components/Calculator/Calculator\";\n\nclass App extends React.Component {\n    render() {\n    return (\n        <div className=\"App\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Calculator/>\n            </MuiPickersUtilsProvider>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"MonthForm_formContainer__22ovY\",\"field\":\"MonthForm_field__1SW_z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"InputForm_formContainer__3lD1m\"};"],"sourceRoot":""}